(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{485:function(t,e,a){"use strict";a.r(e);var s=a(19),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"二、grpc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、grpc"}},[t._v("#")]),t._v(" 二、gRPC")]),t._v(" "),a("h2",{attrs:{id:"_2-1-grpc-特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-grpc-特性"}},[t._v("#")]),t._v(" 2.1 gRPC 特性")]),t._v(" "),a("ul",[a("li",[t._v("优势")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[t._v("支持多种语言；")])]),t._v(" "),a("li",[a("p",[t._v("基于 IDL 文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub；")])]),t._v(" "),a("li",[a("p",[t._v("网络通信依赖 Netty 实现的 HTTP/2 协议封装，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量；")])]),t._v(" "),a("li",[a("p",[t._v("序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架，基于 HTTP/2 + PB, 保障了 RPC 调用的高性能。")])])])]),t._v(" "),a("ul",[a("li",[t._v("劣势")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("服务治理相关能力缺失，负载均衡和服务发现等功能需要开发者扩展实现。")])])]),t._v(" "),a("h2",{attrs:{id:"_2-2-grpc-核心概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-grpc-核心概念"}},[t._v("#")]),t._v(" 2.2 gRPC 核心概念")]),t._v(" "),a("h3",{attrs:{id:"_2-2-1-服务调用模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-服务调用模式"}},[t._v("#")]),t._v(" 2.2.1 服务调用模式")]),t._v(" "),a("p",[t._v("    gRPC 底层通信依赖于 HTTP/2 协议，由于 HTTP/2 协议是一个支持双向流的协议，因此 gRPC 在 API 的设计上也才用了流的方式。gRPC 中允许定义四种服务调用模式：")]),t._v(" "),a("ol",[a("li",[t._v("Unary 调用模式：响应-请求模式，客户端发送请求给服务端，服务端应答；")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("示例")]),t._v(" "),a("p",[t._v("rpc SayHello(HelloRequest) returns (HelloResponse){ }")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("Server Streaming 模式：客户端发送一个请求给服务端，并获取一个数据流用来读取一系列消息。客户端从返回的数据流里一直读取直到没有更多消息为止；")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("示例")]),t._v(" "),a("p",[t._v("rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse){ }")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("Client Streaming 模式：客户端用提供的一个数据流写入并发送一系列消息给服务端。一旦客户端完成消息写入，就等待服务端读取这些消息并返回应答；")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("示例")]),t._v(" "),a("p",[t._v("rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse) { }")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("双向 Streaming 模式：通信双方之间建立相互独立的读写数据流来发送一系列消息，双方都可发送多次消息，且允许乱序发送消息。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("示例")]),t._v(" "),a("p",[t._v("rpc BidiHello(stream HelloRequest) returns (stream HelloResponse){ }")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-2-protobuf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-protobuf"}},[t._v("#")]),t._v(" 2.2.2 Protobuf")]),t._v(" "),a("p",[t._v("    gRPC 默认使用 Protocol Buffers (Protobuf) 作为接口定义语言，来描述服务接口和消息结构。Protocol Buffers 是一个可独立使用的序列化框架，它并不与 gRPC 框架绑定，任何需要支持多语言的 RPC 框架都可以选择使用 Protocol Buffers 作为序列化框架。")]),t._v(" "),a("p",[t._v("Protocol Buffers 的使用主要包括:")]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[t._v("IDL 文件定义（*.proto）, 包含数据结构定义，以及可选的服务接口定义（gRPC）；")])]),t._v(" "),a("li",[a("p",[t._v("各种语言的代码生成（含数据结构定义、以及序列化和反序列化接口）；")])]),t._v(" "),a("li",[a("p",[t._v("使用 Protocol Buffers 的 API 进行序列化和反序列化。")])])])]),t._v(" "),a("h4",{attrs:{id:"支持的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持的数据结构"}},[t._v("#")]),t._v(" 支持的数据结构")]),t._v(" "),a("ul",[a("li",[t._v("支持主流语言常用数据结构，考虑到跨语言特性，对于特定语言的数据结构并不提供支持，如 Java 的 Exception 对象。")])]),t._v(" "),a("h4",{attrs:{id:"基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("protobuf")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("C++")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Java")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("double")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("double")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("double")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("float")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("float")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("float")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("int")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("long")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("String")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("bytes")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("ByteString")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("bool")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("bool")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("…")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("…")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("…")])])])]),t._v(" "),a("p",[t._v("表1. Protobuf 基本数据类型对照表")]),t._v(" "),a("h4",{attrs:{id:"复杂数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂数据类型"}},[t._v("#")]),t._v(" 复杂数据类型")]),t._v(" "),a("ul",[a("li",[t._v("数组类型")])]),t._v(" "),a("p",[t._v("利用 Protobuf 提供的 repeted关键字，标识该字段重复任意次数，相当于数组的功能。")]),t._v(" "),a("ul",[a("li",[t._v("枚举类型")])]),t._v(" "),a("p",[t._v("enum关键字定义枚举类型，eg.")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("message QueryInfo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tstring queryID "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tenum Types"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("GROUP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("OTHERS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tTypes "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("ul",[a("li",[t._v("Map 类型")])]),t._v(" "),a("p",[t._v("在 Protobuf 3 中新增了对 Map 类型的支持，eg.")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("map"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("key_type, value_type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" map_field "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmessage ValueType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string, ValueType"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" typeMap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("泛型")])]),t._v(" "),a("p",[t._v("对于类型无法确定的情况，类似于 Java 中的泛型，Protobuf 提供了"),a("code",[t._v("google.protobuf.Any")]),t._v("这个类型，表示存放任意类型的数据。根据我司开发规范，这种类型被强制不允许使用。")]),t._v(" "),a("p",[t._v("详细语法参考："),a("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto3",target:"_blank",rel:"noopener noreferrer"}},[t._v("Language Guide (proto3)"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"代码生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码生成"}},[t._v("#")]),t._v(" 代码生成")]),t._v(" "),a("p",[t._v(".proto 文件中定义的每个 service ，protoc 会生成一个名为"),a("code",[t._v("{service_name}Grpc")]),t._v("的类，这个类存放在"),a("code",[t._v("java_packag")]),t._v("指定的包结构下。")]),t._v(" "),a("p",[t._v("下载 protoc 后，可以通过命令行调用 protoc 来生成桩代码，或者使用官方推荐的更优雅的方式，配置 maven 或者 gradle 在项目编译时自动生成桩代码。maven 配置见下文。")]),t._v(" "),a("h2",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/161577635",target:"_blank",rel:"noopener noreferrer"}},[t._v("gRPC系列(三) 如何借助HTTP2实现传输"),a("OutboundLink")],1),t._v(" "),a("br"),a("a",{attrs:{href:"https://juejin.cn/post/6844904007811465229",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解Protobuf3协议原理"),a("OutboundLink")],1)]),t._v(" "),a("blockquote",[a("p",[t._v("本文作者："),a("a",{attrs:{href:"https://dbsecurity.com.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("许怀安"),a("OutboundLink")],1),t._v(" "),a("br"),t._v("创作时间：2022.1.10\n"),a("br"),t._v("版权声明：本博客所有文章除特别声明外，均采用"),a("a",{attrs:{href:"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh",target:"_blank",rel:"noopener noreferrer"}},[t._v("BY-NC-SA"),a("OutboundLink")],1),t._v("许可协议。转载请禀明出处！")])])])}),[],!1,null,null,null);e.default=r.exports}}]);