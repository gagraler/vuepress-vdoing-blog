{"remainingRequest":"E:\\vuepress-vdoing-blog\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!E:\\vuepress-vdoing-blog\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vuepress-vdoing-blog\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vuepress-vdoing-blog\\node_modules\\vuepress-theme-vdoing\\components\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vuepress-vdoing-blog\\node_modules\\vuepress-theme-vdoing\\components\\Home.vue","mtime":1642945472267},{"path":"E:\\vuepress-vdoing-blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1640456693969},{"path":"E:\\vuepress-vdoing-blog\\node_modules\\babel-loader\\lib\\index.js","mtime":1640456693110},{"path":"E:\\vuepress-vdoing-blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1640456693969},{"path":"E:\\vuepress-vdoing-blog\\node_modules\\vue-loader\\lib\\index.js","mtime":1640456693944}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}